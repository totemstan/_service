# MAN [WWW](https://github.com/totemstan/man)  [COE](https://sc.appdev.proj.coe/acmesds/man)  [SBU](https://gitlab.west.nga.ic.gov/acmesds/man)

[MathJS](https://mathjs.org/)-based image and matrix manipulator.  

* [light weight image processing](https://www.npmjs.com/package/jimp)  
* [symbolic algebra](https://www.npmjs.com/package/mathjs)  
* time series analysis (
	[digital signal](https://www.npmjs.com/package/dsp), 
	[spectral](https://www.npmjs.com/package/fft-js))  
* hidden markov methods (
	[viterbi, baum-welch](https://www.npmjs.com/package/nodehmm), 
	[EM](https://www.npmjs.com/package/expectation-maximization))  
* matrix decompositions (
	[eigen spectrums](https://www.npmjs.com/package/node-svd))  
* [bayesian belief networks](https://www.npmjs.com/package/jsbayes)  
* [recurrent neural networks](https://www.npmjs.com/package/recurrent-js)  
* [convolutional neural networks](http://caffe.berkeleyvision.org/)  
* regression methods (
	[logistic](https://www.npmjs.com/package/ml-logistic-regression),
	[support vector](https://www.npmjs.com/package/node-svm), and 
	[other](https://www.npmjs.com/package/ml))  
* non-linear optimizers (
	[least cost path](https://www.npmjs.com/package/edmonds-blossom),
	[linear programming](https://www.npmjs.com/package/javascript-lp-solver),
	[gradient descent, newton-raphton](https://www.npmjs.com/package/newton-raphson-method))  
* special functions (
	[gamma](https://www.npmjs.com/package/gamma), 
	[multivariate normal](https://www.npmjs.com/package/multivariate-normal), 
	[rieman-zeta](https://www.npmjs.com/package/math-riemann-zeta)).

## Usage

Use MAN as follows:

	const $ = require("man");
	
	@example
	Eval a js or mathjs script in a context ctx:

		var 
			ctx = $( "script", ctx, ctx => {   // eval with callback
				Trace("updated context", ctx);
			} ),

			ctx = "script".$( ctx ),		// abbreviated

			{ x, y, ... } = "script".$( ctx ) || {};	// with context x,y extractions

	@example
	Create a matrix:

		var 
			A = $( N, (n,A) => A[n] = ... ) ,  // define N-length vector 
			A = $( [M,N], (n,m,A) => A[m][n] = ... ) ;	// define M x N matrrix

	@example
	Index a matrix:

		A.$( (n,A) => A[n] = ... ) 	// index vector with callback
		A.$$( (n,m,A) => A[n][m] = ... ) 	// index matrix with callback

	@example
	Sample a matrix with optional callback cb(val):

		var 
			B = A.get( idx , cb),
			B = A.get( "key, ...", cb ),
			B = A.get( [idx, ...] , cb),
			B = A.get( [key, ...] , cb ),
			B = A.get( {rekey: { toKey: "fromKey", ... }, cb ),
			B = A.get( {draw: N}, cb ),
			B = A.get( {start:N, count:N}, cb ),
			B = A.get( {KEY_starts: "with", ...}, cb ),
			B = A.get( {KEY_ends: "with", ...}, cb )

	@example
	Import functions to $.somefn and to $( "somefn(...)" )

		$( {
			somefn: function (args) { ... },
			:
			:
		} );

	@example
	Use the task sharder:

		$( { 
			keys: "i,j,k",  	// array indicies
			i: [0,1,2,3],  		// domain of index i
			j: [4,8],				// domain of index j
			k: [0],					// domain of index k
			qos: 0,				// regulation time in ms if not zero
			local: false, 		// enable to run task local, i.e. w/o workers and nodes
			workers: 4, 		// limit number of workers (aka cores) per node
			nodes: 3 			// limit number of nodes (ala locales) in the cluster
		}, 

			// here, a simple task that returns a message 
			$ => "my result is " + (i + j*k) + " from " + $.worker + " on "  + $.node,

			// here, a simple callback that displays the task results
			msg => console.log(msg) 
		);

	@example
	Aggregate and save events ev = {at: "KEY", ...} to ctx.Save_KEY with 
	callback cb(unsaved events)

		[ev, ...].save( ctx, evs => { ... } );
		"query".save( ctx, evs => { ... } );

	@example
	Usage methods of $().

		const $ = require("man")
		$( "mathjs script", ctx, ctx => { ... } )
		$( "mathjs script", ctx )
		$( "mathjs script" )
		$( [M,N], (m,n,A) => { A[m][n] = ... } )
		$( N, (n,A) => { A[n] = ... } )
		$({	// import functions
			f: (...) => { ... },
			...
		})
		$({	// task sharding
				keys: "i,j,...",  	// array indicies
				i: [...],  		// domain of index i
				j: [...],				// domain of index j
				k: [...],					// domain of index k
				qos: N,				// regulation time in ms if not zero
				local: false, 		// enable to run task local, i.e. w/o workers and nodes
				workers: N, 		// limit number of workers (aka cores) per node
				nodes: N 			// limit number of nodes (ala locales) in the cluster
			}, 

			// here, a simple task that returns a message 
			$ => "my result is " + (i + j*k) + " from " + $.worker + " on "  + $.node,

			// here, a simple callback that displays the task results
			msg => console.log(msg) 
		);

	@example
	Eval a mathjs script with optional callback and optional context:

		var 
			ctx = $( "mathjs script", ctx, ctx => {   
				x: 1, 
				y: 20, ...
			} );

	@example
	Eval with extraction of context keys:

		const {x, y, ... } = $( "mathjs script", ctx ) || {};

	@example
		// Import functions to $.somefn and to $( "somefn(...)" )
		$( {
			somefn: function (args) { ... },
			:
			:
		} );

	@example
	Use the task sharder:

		$( { 
				keys: "i,j,k",  	// array indicies
				i: [0,1,2,3],  		// domain of index i
				j: [4,8],				// domain of index j
				k: [0],					// domain of index k
				qos: 0,				// regulation time in ms if not zero
				local: false, 		// enable to run task local, i.e. w/o workers and nodes
				workers: 4, 		// limit number of workers (aka cores) per node
				nodes: 3 			// limit number of nodes (ala locales) in the cluster
			}, 

			// here, a simple task that returns a message 
			$ => "my result is " + (i + j*k) + " from " + $.worker + " on "  + $.node,

			// here, a simple callback that displays the task results
			msg => console.log(msg) 
		);	

## Installation

Clone **MAN** from one of its repos:

	git clone https://github.com/totemstan/man
	git clone https://sc.appdev.proj.coe/acmesds/man
	git clone https://gitlab.west.nga.ic.gov/acmesds/man

## Manage 

	npm test [ ? || L1 || ... ]			# unit test
	npm run [ edit || start ]			# Configure environment
	npm run redoc						# Regen documentation
	
## Program Reference
<details>
<summary>
<i>Open/Close</i>
</summary>
{{>main}}
</details>

## Contacting, Contributing, Following

Feel free to 
* submit and status **TOTEM** issues (
[WWW](http://totem.zapto.org/issues.view) 
[COE](https://totem.west.ile.nga.ic.gov/issues.view) 
[SBU](https://totem.nga.mil/issues.view)
)  
* contribute to **TOTEM** notebooks (
[WWW](http://totem.zapto.org/shares/notebooks/) 
[COE](https://totem.west.ile.nga.ic.gov/shares/notebooks/) 
[SBU](https://totem.nga.mil/shares/notebooks/)
)  
* revise **TOTEM** requirements (
[WWW](http://totem.zapto.org/reqts.view) 
[COE](https://totem.west.ile.nga.ic.gov/reqts.view) 
[SBU](https://totem.nga.mil/reqts.view), 
)  
* browse **TOTEM** holdings (
[WWW](http://totem.zapto.org/) 
[COE](https://totem.west.ile.nga.ic.gov/) 
[SBU](https://totem.nga.mil/)
)  
* or follow **TOTEM** milestones (
[WWW](http://totem.zapto.org/milestones.view) 
[COE](https://totem.west.ile.nga.ic.gov/milestones.view) 
[SBU](https://totem.nga.mil/milestones.view)
).

## License

[MIT](LICENSE)


* * *

&copy; 2012 ACMESDS